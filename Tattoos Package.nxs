{"name":"tattoos","enabled":true,"description":"","type":"group","id":1,"items":[{"type":"function","name":"SystemLoaded","enabled":true,"id":2,"code":"// Tattoos \nclient.Tattoos = {};\nclient.Tattoos.collection = [];\nclient.Tattoos.locations = ['head', 'torso', 'left arm', 'right arm', 'left leg', 'right leg', 'back'];\nclient.Tattoos.inking = false;\nclient.Tattoos.index = 0;\nclient.Tattoos.tattoo = undefined;\nclient.Tattoos.person = '';\n\nclient.Tattoos.alias = {};\n\nclient.Tattoos.inkMe = function(what) {\n    let tattoo = Tattoos.get(what.toLowerCase());\n    Tattoos.inkStart(tattoo, 'me');\n};\n\nclient.Tattoos.inkPerson = function(what, who) {\n    let tattoo = Tattoos.get(what.toLowerCase());\n    client.Tattoos.inkStart(tattoo, who);\n};\n\nclient.Tattoos.inkStart = function(tattoo, person) {\n    if(tattoo) {\n        tattoo.outr_inks();\n        client.Tattoos.inking = true;\n        client.Tattoos.index = 0;\n        client.Tattoos.tattoo = tattoo;\n        client.Tattoos.person = person;\n        client.Tattoos.tryNext();\n    } else {\n        display_notice('INVALID TATTOO!', 'red');\n        client.Tattoos.reset();\n    }\n};\n\nclient.Tattoos.tryNext = function() {\n    if(client.Tattoos.inking) {\n        client.Tattoos.tattoo.ink(client.Tattoos.locations[client.Tattoos.index], client.Tattoos.person);\n        client.Tattoos.index++;\n        if(client.Tattoos.index >= client.Tattoos.locations.length) {\n            client.Tattoos.reset();\n        }\n    }\n};\n\nclient.Tattoos.reset = function() {\n    client.Tattoos.inking = false;\n    client.Tattoos.index = 0;\n    client.Tattoos.tattoo = undefined;\n    client.Tattoos.person = '';\n};\n\nclient.Tattoos.add = function(name, ref) {\n    client.Tattoos.collection[name] = ref;\n};\n\nclient.Tattoos.get = function(name) {\n    return client.Tattoos.collection[name];\n};\n\n\nclient.Tattoo = class Tattoo {\n    constructor(name, inks, alias) {\n        this.name = name;\n        this.inks = inks;\n\n        // alias to use for touching tattoo\n        if(alias !== undefined) {\n            client.Tattoos.alias[alias] = this.touch.bind(this);\n        }\n\n        // Add to collection\n        client.Tattoos.add(name.toLowerCase(), this);\n    }\n    \n    touch() {\n        send_command('touch ' +this.name);\n    }\n\n    outr_inks() {\n        let cmd = [];\n        let inks = this.inks;\n        for(let i=0; i < inks.length; i++) {\n            cmd.push('outr '+inks[i]);\n        }\n        send_command(cmd.join(client.sys.sep));\n    }\n    \n    ink(where, who) {\n        let cmd = [];\n        cmd.push('ink '+this.name+' on '+where+' of ' +(who || 'me'));\n        send_command(cmd.join(client.sys.sep));\n    }\n};\n\nclient.TargetTattoo = class TargetTattoo extends Tattoo {\n    constructor(name, inks, alias) {\n        super(name, inks, alias);\n    }\n\n    touch(who) {\n        send_command('touch '+this.name+ ' '+(who || client.sys.target));\n    }\n\n};\n\n\n// Instantiate Classes\n// Regular Tattoos\nclient.Mindseye = new client.Tattoo('mindseye', ['2 blueink', '1 greenink'],'tm');\nclient.Cloak = new client.Tattoo('cloak', ['3 blueink'],'tc');\nclient.Firefly = new client.Tattoo('firefly', ['1 yellowink']);\nclient.Moss = new client.Tattoo('moss', ['1 blueink', '1 redink', '1 yellowink']);\nclient.Feather = new client.Tattoo('feather', ['2 blueink', '1 redink']);\nclient.Shield = new client.Tattoo('shield', ['1 greenink', '2 redink'],'ts');\nclient.Bell = new client.Tattoo('bell', ['3 blueink', '2 redink']);\nclient.Crystal = new client.Tattoo('crystal', ['1 greenink', '1 purpleink', '1 yellowink'],'tcr');\nclient.Moon = new client.Tattoo('moon', ['1 blueink', '1 redink', '1 yellowink']);\nclient.Starburst = new client.Tattoo('starburst', ['1 blueink', '1 goldink', '1 greenink', '1 purpleink', '1 redink', '1 yellowink'],'tstar');\nclient.Boar = new client.Tattoo('boar', ['1 purpleink', '2 redink']);\nclient.Tree = new client.Tattoo('tree', ['5 greenink'],'tree');\nclient.Megalith = new client.Tattoo('megalith', ['2 goldink']);\nclient.Ox = new client.Tattoo('ox', ['1 goldink', '1 redink', '1 yellowink', '1 blueink']);\n\n// Target Tattoos\nclient.Web = new client.TargetTattoo('web', ['1 greenink', '1 yellowink'],'tw');\nclient.Tentacle = new client.TargetTattoo('tentacle', ['2 greenink', '1 purpleink'],'tent');\nclient.Hourglass = new client.TargetTattoo('hourglass', ['1 blueink', '2 yellowink'],'thr');\nclient.Brazier = new client.TargetTattoo('brazier', ['2 redink', '2 yellowink'],'tb');\nclient.Prism = new client.TargetTattoo('prism', ['1 blueink', '1 greenink', '1 purpleink', '1 redink', '1 yellowink']);\nclient.Hammer = new client.TargetTattoo('hammer', ['1 purpleink', '2 redink'],'tht');\nclient.Chameleon = new client.TargetTattoo('chameleon', ['1 goldink', '1 purpleink', '1 yellowink']);"},{"type":"alias","name":"","enabled":true,"id":3,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"Tattoos.alias[args[0]]();"}],"text":"^(tw|tb|tent|tc|ts|tcr|tht|thr|tree|tstar|tm)$"},{"type":"alias","name":"","enabled":true,"id":4,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"Tattoos.inkMe(args[1]);"}],"text":"^ink\\s+(\\w+)$"},{"type":"alias","name":"","enabled":true,"id":5,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"Tattoos.inkPerson(args[1], args[2]);"}],"text":"^ink\\s+(\\w+)\\s+(\\w+)$"},{"type":"trigger","name":"Can't ink","enabled":true,"id":6,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You cannot hold any more tattoos on your (.+)\\.$","actions":[{"action":"script","script":"client.Tattoos.tryNext();"}]}]}